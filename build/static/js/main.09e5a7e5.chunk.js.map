{"version":3,"sources":["images/homeImage.png","AppNavbar.js","Home.js","character/CharacterList.js","character/CharacterDisplay.js","character/CharacterEdit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","reactstrap_es","color","dark","expand","nav","inNavbar","caret","left","tag","Link","to","divider","onClick","navbar","className","href","Component","Home","AppNavbar_AppNavbar","src","homeImage","alt","fluid","CharacterList","character","isLoading","remove","_this2","fetch","then","response","json","data","id","concat","method","headers","Accept","Content-Type","updatedCharacter","toConsumableArray","_this3","filter","i","_this4","_this$state","characterList","map","key","style","whiteSpace","characterName","characterAge","characterGender","characterRace","characterDescription","characterAlive","size","characterId","width","CharacterDisplay","emptyItem","characterPurpose","characterBackground","characterNotes","item","handleChange","handleSubmit","match","params","group","event","target","value","name","objectSpread","preventDefault","console","log","body","JSON","stringify","history","push","title","onSubmit","for","type","autoComplete","withRouter","CharacterEdit","onChange","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09e5a7e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeImage.d65a8552.png\";","import React, { Component } from 'react';\nimport { Collapse,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarToggler,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand></NavbarBrand>\n            <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                    Menu\n                </DropdownToggle>\n                <DropdownMenu left>\n                    <DropdownItem tag={Link} to=\"/\">\n                        Home\n                    </DropdownItem>\n                    <DropdownItem divider />\n                    <DropdownItem tag={Link} to=\"/character\">\n                        Manage Characters\n                    </DropdownItem>\n                </DropdownMenu>\n            </UncontrolledDropdown>\n            <NavbarToggler onClick={this.toggle}/>\n            <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n\n                    <NavItem>\n                        <NavLink href=\"https://github.com/stuvwxyz/character-ui\">GitHub UI</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"https://github.com/stuvwxyz/character-api\">GitHub API</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>;\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport homeImage from './images/homeImage.png';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={homeImage} className=\"App-logo\" alt=\"homeImage\" />\n                        <p>\n                            Begin your adventure\n                        </p>\n                        <Container fluid>\n                            <Button color=\"link\"><Link to=\"/character\">Manage Characters</Link></Button>\n                        </Container>\n                    </header>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from '../AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass CharacterList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {character: [], isLoading: true};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n\n        fetch('/api/character')\n            .then(response => response.json())\n            .then(data => this.setState({character: data, isLoading: false}));\n    }\n\n    async remove(id) {\n        await fetch(`/api/character/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedCharacter = [...this.state.character].filter(i => i.id !== id);\n            this.setState({character: updatedCharacter});\n        });\n    }\n\n    render() {\n        const {character, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n\n        const characterList = character.map(character => {\n\n            return <tr key={character.id}>\n                <td style={{whiteSpace: 'nowrap'}}>{character.characterName}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{character.characterAge}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{character.characterGender}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{character.characterRace}</td>\n                <td style={{whiteSpace: 'wrap'}}>{character.characterDescription}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{character.characterAlive}</td>\n\n                <td>\n                    <ButtonGroup className=\"float-right\">\n                        <Button size=\"sm\" color=\"success\" tag={Link} to={\"/character/\" + character.characterId}>Details</Button>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/characteredit/\" + character.characterId}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(character.characterId)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/characteredit/new\">Add Character</Button>\n                    </div>\n                    <h3>Character List</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"15%\">Name</th>\n                            <th width=\"20%\">Age</th>\n                            <th width=\"20%\">Gender</th>\n                            <th width=\"20%\">Race</th>\n                            <th width=\"20%\">Physical Description</th>\n                            <th width=\"20%\">Alive</th>\n                            <th width=\"10%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {characterList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default CharacterList;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from '../AppNavbar';\n\nclass CharacterDisplay extends Component {\n\n    emptyItem = {\n        characterId: '',\n        characterName: '',\n        characterAge: '',\n        characterGender: '',\n        characterRace: '',\n        characterDescription: '',\n        characterPurpose: '',\n        characterBackground: '',\n        characterNotes: '',\n        characterAlive: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const group = await (await fetch(`/api/character/${this.props.match.params.id}`)).json();\n            this.setState({item: group});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        console.log(this.state)\n        const {item} = this.state;\n        let id = item.characterId;\n        console.log(id)\n        await fetch(`/api/character/${id}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/character');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{'View Character'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"characterName\">characterName</Label>\n                        <Input type=\"text\" name=\"characterName\" id=\"characterName\" value={item.characterName || ''}\n                               autoComplete=\"characterName\"/>\n\n                        <Label for=\"characterAge\">characterAge</Label>\n                        <Input type=\"text\" name=\"characterAge\" id=\"characterAge\" value={item.characterAge || ''}\n                               autoComplete=\"characterAge\"/>\n\n                        <Label for=\"characterGender\">characterGender</Label>\n                        <Input type=\"text\" name=\"characterGender\" id=\"characterGender\" value={item.characterGender || ''}\n                               autoComplete=\"characterGender\"/>\n\n                        <Label for=\"characterRace\">characterRace</Label>\n                        <Input type=\"text\" name=\"characterRace\" id=\"characterRace\" value={item.characterRace || ''}\n                               autoComplete=\"characterRace\"/>\n\n                        <Label for=\"characterDescription\">characterDescription</Label>\n                        <Input type=\"text\" name=\"characterDescription\" id=\"characterDescription\" value={item.characterDescription || ''}\n                               autoComplete=\"characterDescription\"/>\n\n                        <Label for=\"characterPurpose\">characterPurpose</Label>\n                        <Input type=\"text\" name=\"characterPurpose\" id=\"characterPurpose\" value={item.characterPurpose || ''}\n                               autoComplete=\"characterPurpose\"/>\n\n                        <Label for=\"characterBackground\">characterBackground</Label>\n                        <Input type=\"text\" name=\"characterBackground\" id=\"characterBackground\" value={item.characterBackground || ''}\n                               autoComplete=\"characterBackground\"/>\n\n                        <Label for=\"characterNotes\">characterNotes</Label>\n                        <Input type=\"text\" name=\"characterNotes\" id=\"characterNotes\" value={item.characterNotes || ''}\n                               autoComplete=\"characterNotes\"/>\n\n                        <Label for=\"characterAlive\">characterAlive</Label>\n                        <Input type=\"text\" name=\"characterAlive\" id=\"characterAlive\" value={item.characterAlive || ''}\n                               autoComplete=\"characterAlive \"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"success\" tag={Link} to=\"/character\">Return</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(CharacterDisplay);\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from '../AppNavbar';\n\nclass CharacterEdit extends Component {\n\n    emptyItem = {\n        characterId: '',\n        characterName: '',\n        characterAge: '',\n        characterGender: '',\n        characterRace: '',\n        characterDescription: '',\n        characterPurpose: '',\n        characterBackground: '',\n        characterNotes: '',\n        characterAlive: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const group = await (await fetch(`/api/character/${this.props.match.params.id}`)).json();\n            this.setState({item: group});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        await fetch('/api/character', {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/character');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Character' : 'Add Character'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"characterName\">characterName</Label>\n                        <Input type=\"text\" name=\"characterName\" id=\"characterName\" value={item.characterName || ''}\n                               onChange={this.handleChange} autoComplete=\"characterName\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterAge\">characterAge</Label>\n                        <Input type=\"text\" name=\"characterAge\" id=\"characterAge\" value={item.characterAge || ''}\n                               onChange={this.handleChange} autoComplete=\"characterAge\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterGender\">characterGender</Label>\n                        <Input type=\"text\" name=\"characterGender\" id=\"characterGender\" value={item.characterGender || ''}\n                               onChange={this.handleChange} autoComplete=\"characterGender\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterRace\">characterRace</Label>\n                        <Input type=\"text\" name=\"characterRace\" id=\"characterRace\" value={item.characterRace || ''}\n                               onChange={this.handleChange} autoComplete=\"characterRace\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterDescription\">characterDescription</Label>\n                        <Input type=\"text\" name=\"characterDescription\" id=\"characterDescription\" value={item.characterDescription || ''}\n                               onChange={this.handleChange} autoComplete=\"characterDescription\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterPurpose\">characterPurpose</Label>\n                        <Input type=\"text\" name=\"characterPurpose\" id=\"characterPurpose\" value={item.characterPurpose || ''}\n                               onChange={this.handleChange} autoComplete=\"characterPurpose\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterBackground\">characterBackground</Label>\n                        <Input type=\"text\" name=\"characterBackground\" id=\"characterBackground\" value={item.characterBackground || ''}\n                               onChange={this.handleChange} autoComplete=\"characterBackground\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterNotes\">characterNotes</Label>\n                        <Input type=\"text\" name=\"characterNotes\" id=\"characterNotes\" value={item.characterNotes || ''}\n                               onChange={this.handleChange} autoComplete=\"characterNotes\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"characterAlive\">characterAlive</Label>\n                        <Input type=\"text\" name=\"characterAlive\" id=\"characterAlive\" value={item.characterAlive || ''}\n                               onChange={this.handleChange} autoComplete=\"characterAlive\"/>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/character\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(CharacterEdit);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport CharacterList from './character/CharacterList';\nimport CharacterDisplay from \"./character/CharacterDisplay\";\nimport CharacterEdit from \"./character/CharacterEdit\";\n\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n\n            <Route path='/character' exact={true} component={CharacterList}/>\n            <Route path='/character/:id' component={CharacterDisplay}/>\n            <Route path='/characteredit/:id' component={CharacterEdit}/>\n          </Switch>\n        </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}